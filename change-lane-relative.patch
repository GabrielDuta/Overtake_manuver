diff --git a/src/plexe/mobility/CommandInterface.cc b/src/plexe/mobility/CommandInterface.cc
index 83b3ffdd8..3b66c0653 100644
--- a/src/plexe/mobility/CommandInterface.cc
+++ b/src/plexe/mobility/CommandInterface.cc
@@ -82,6 +82,15 @@ void CommandInterface::Vehicle::changeLane(int lane, double duration)
     ASSERT(buf.eof());
 }
 
+void CommandInterface::Vehicle::changeLaneRelative(int lane, double duration)
+{
+    uint8_t commandType = TYPE_COMPOUND;
+    int nParameters = 3;
+    uint8_t variableId = CMD_CHANGELANE;
+    TraCIBuffer buf = cifc->connection->query(CMD_SET_VEHICLE_VARIABLE, TraCIBuffer() << variableId << nodeId << commandType << nParameters << static_cast<uint8_t>(TYPE_BYTE) << (uint8_t) lane << static_cast<uint8_t>(TYPE_DOUBLE) << duration << static_cast<uint8_t>(TYPE_BYTE) << (uint8_t) 1);
+    ASSERT(buf.eof());
+}
+
 std::vector<CommandInterface::Vehicle::neighbor> CommandInterface::Vehicle::getNeighbors(uint8_t lateralDirection, uint8_t longitudinalDirection, uint8_t blocking)
 {
     TraCIBuffer response = cifc->connection->query(CMD_GET_VEHICLE_VARIABLE, TraCIBuffer() << static_cast<uint8_t>(VAR_NEIGHBORS)
@@ -429,14 +438,14 @@ void CommandInterface::__changeLane(std::string veh, int current, int direction,
 {
     if (safe) {
         vehicle(veh).setLaneChangeMode(FIX_LC);
-        vehicle(veh).changeLane(current + direction, 0);
+        vehicle(veh).changeLaneRelative(direction, 0);
     }
     else {
         int state, state2;
         vehicle(veh).getLaneChangeState(direction, state, state2);
         if ((state & lca_overlapping) == 0) {
             vehicle(veh).setLaneChangeMode(FIX_LC_AGGRESSIVE);
-            vehicle(veh).changeLane(current + direction, 0);
+            vehicle(veh).changeLaneRelative(direction, 0);
             laneChanges[veh].wait = true;
         }
     }
diff --git a/src/plexe/mobility/CommandInterface.h b/src/plexe/mobility/CommandInterface.h
index 3933f8ad0..25be7a224 100644
--- a/src/plexe/mobility/CommandInterface.h
+++ b/src/plexe/mobility/CommandInterface.h
@@ -54,6 +54,7 @@ public:
         void setLaneChangeMode(int mode);
         void getLaneChangeState(int direction, int& state1, int& state2);
         void changeLane(int lane, double duration);
+        void changeLaneRelative(int lane, double duration);
         /**
          * Get neighbors (i.e. a pair <name, distance>) of the vehicle.
          */
