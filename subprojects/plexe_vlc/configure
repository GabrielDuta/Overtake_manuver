#!/usr/bin/env python2

#
# Copyright (C) 2013-2020 Christoph Sommer <sommer@ccs-labs.org>
#
# Documentation for these modules is at http://veins.car2x.org/
#
# SPDX-License-Identifier: GPL-2.0-or-later
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#

"""
Creates Makefile(s) for building this project.
"""

import os
import sys
import subprocess
from logging import info, warning, error
from optparse import OptionParser



if sys.version_info[0] == 3:
    warning("Warning: running configure with python3 might result in subtle errors.")

# Option handling
parser = OptionParser()
parser.add_option('--with-plexe', dest='plexe', help="link with a version of Plexe installed in PATH [default: %default", metavar="PATH", default="../../")
parser.add_option('--with-veins', dest='veins', help="link with a version of Veins installed in PATH [default %default]", metavar="PATH", default="../../../veins")
parser.add_option("--with-veins-vlc", dest="vlc", help="link with a version of Veins VLC installed in PATH [default: %default]", metavar="PATH", default="../../../veins_vlc")
(options, args) = parser.parse_args()


# Start with default flags
makemake_flags = ['-f', '--deep', '--no-deep-includes', '--make-so', '-I', '.', '-o', 'plexe_vlc', '-O', 'out', '-p', 'PLEXE_CV2X']
run_libs = [os.path.join('src', 'plexe_vlc')]
run_neds = [os.path.join('src', 'plexe_vlc')]
run_imgs = []

# Add flags for Plexe
if options.plexe:
    fname = os.path.join(options.plexe, 'print-plexe-version')
    expect_version = ['3.0-alpha3']
    try:
        print 'Running "%s" to determine Plexe version.' % fname
        version = subprocess.check_output(['env', fname]).strip()
        if not version in expect_version:
            print ''
            print '!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!'
            warning('Unsupported Plexe Version. Expecting %s, found "%s"' % (' or '.join(expect_version), version))
            print '!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!'
            print ''
        else:
            print 'Found Plexe version "%s". Okay.' % version

            plexe_header_dirs = [os.path.join(os.path.relpath(options.plexe, 'src'), 'src')]
            plexe_includes = ['-I' + s for s in plexe_header_dirs]
            plexe_link = ["-L" + os.path.join(os.path.relpath(options.plexe, 'src'), 'src'), "-lplexe$(D)"]
            plexe_defs = []
            makemake_flags += plexe_includes + plexe_link + plexe_defs
            run_libs = [os.path.relpath(os.path.join(options.plexe, 'src', 'plexe'))] + run_libs
            run_neds = [os.path.relpath(os.path.join(options.plexe, 'src', 'plexe'))] + run_neds
            run_imgs = [os.path.relpath(os.path.join(options.plexe, 'images'))] + run_imgs

    except subprocess.CalledProcessError as e:
        error('Could not determine Plexe Version (by running %s): %s. Check the path to Plexe (--with-plexe=... option) and the Veins version (should be version %s)' % (fname, e, ' or '.join(expect_version)))
        sys.exit(1)

# Add flags for Veins
if options.veins:
    fname = os.path.join(options.veins, 'print-veins-version')
    expect_version = ['5.0', '5.1']
    try:
        print 'Running "%s" to determine Veins version.' % fname
        version = subprocess.check_output(['env', fname]).strip()
        if not version in expect_version:
            print ''
            print '!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!'
            warning('Unsupported Veins Version. Expecting %s, found "%s"' % (' or '.join(expect_version), version))
            print '!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!'
            print ''
        else:
            print 'Found Veins version "%s". Okay.' % version

            veins_header_dirs = [os.path.join(os.path.relpath(options.veins, 'src'), 'src')]
            veins_includes = ['-I' + s for s in veins_header_dirs]
            veins_link = ["-L" + os.path.join(os.path.relpath(options.veins, 'src'), 'src'), "-lveins$(D)"]
            veins_defs = []
            makemake_flags += veins_includes + veins_link + veins_defs
            run_libs = [os.path.relpath(os.path.join(options.veins, 'src', 'veins'))] + run_libs
            run_neds = [os.path.relpath(os.path.join(options.veins, 'src', 'veins'))] + run_neds
            run_imgs = [os.path.relpath(os.path.join(options.veins, 'images'))] + run_imgs

    except subprocess.CalledProcessError as e:
        error('Could not determine Veins Version (by running %s): %s. Check the path to Veins (--with-veins=... option) and the Veins version (should be version %s)' % (fname, e, ' or '.join(expect_version)))
        sys.exit(1)


# Add flags for VLC
if options.vlc:
    fname = os.path.join(options.vlc, 'print-veins_vlc-version')
    expect_version = ['1.0']
    try:
        print 'Running "%s" to determine Veins VLC version.' % fname
        version = subprocess.check_output(['env', fname]).strip()
        if not version in expect_version:
            print ''
            print '!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!'
            warning('Unsupported Veins VLC Version. Expecting %s, found "%s"' % (' or '.join(expect_version), version))
            print '!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!'
            print ''
        else:
            print 'Found Veins VLC version "%s". Okay.' % version
    except OSError as e:
        error('Could not determine Veins VLC Version (by running %s): %s. Check the path to Veins VLC (--with-veins-vlc=... option) and the Veins VLC version (should be version %s)' % (fname, e, ' or '.join(expect_version)))
        sys.exit(1)

    vlc_header_dirs = [os.path.join(os.path.relpath(options.vlc, 'src'), 'src')]
    vlc_includes = ['-I' + s for s in vlc_header_dirs]
    vlc_link = ["-L" + os.path.join(os.path.relpath(options.vlc, 'src'), 'src'), "-lveins-vlc$(D)"]
    vlc_defs = []

    makemake_flags += vlc_includes + vlc_link + vlc_defs
    run_libs = [os.path.relpath(os.path.join(options.vlc, 'src', 'veins-vlc'))] + run_libs
    run_neds = [os.path.relpath(os.path.join(options.vlc, 'src', 'veins-vlc'))] + run_neds
    run_imgs = [os.path.relpath(os.path.join(options.vlc, 'images'))] + run_imgs

# Start creating files
if not os.path.isdir('out'):
    os.mkdir('out')

f = open(os.path.join('out', 'config.py'), 'w')
f.write('run_libs = %s\n' % repr(run_libs))
f.write('run_neds = %s\n' % repr(run_neds))
f.write('run_imgs = %s\n' % repr(run_imgs))
f.close()

subprocess.check_call(['env', 'opp_makemake'] + makemake_flags, cwd='src')

info('Configure done. You can now run "make".')
