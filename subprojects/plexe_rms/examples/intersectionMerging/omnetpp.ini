[General]
cmdenv-express-mode = true
cmdenv-autoflush = true
cmdenv-status-frequency = 10s
num-rngs = 6

network = Intersection

##########################################################
#            Simulation parameters                       #
##########################################################
debug-on-errors = true
print-undisposed = true
eventlog-file = ${resultdir}/none.elog
snapshot-file = ${resultdir}/none.sna

*.playgroundSizeX = 65000m
*.playgroundSizeY = 25000m
*.playgroundSizeZ = 50m

sim-time-limit = 360 s

##########################################################
# Annotation parameters                                  #
##########################################################
*.annotations.draw = true

##########################################################
# Obstacle parameters                                    #
##########################################################
*.obstacles.debug = false

##########################################################
#            WorldUtility parameters                     #
##########################################################
*.world.useTorus = false
*.world.use2D = false

##########################################################
#            TraCIScenarioManager parameters             #
##########################################################
*.manager.updateInterval = 0.01s
*.manager.host = "localhost"
*.manager.moduleType = "vtypeauto=org.car2x.plexe.subprojects.plexe_rms.PlatoonCarRms shockwave=ShockwaveCar"
*.manager.moduleName = "vtypeauto=node shockwave=shockwave"
*.manager.moduleDisplayString = ""
*.manager.autoShutdown = true
*.manager.margin = 25
*.manager.order = -1

##########################################################
#            11p specific parameters                     #
#                                                        #
#                    NIC-Settings                        #
##########################################################
*.connectionManager.sendDirect = true
*.connectionManager.maxInterfDist = 2600m
*.connectionManager.drawMaxIntfDist = false

*.**.nic.mac1609_4.useServiceChannel = false

*.**.nic.mac1609_4.txPower = 100mW
*.**.nic.mac1609_4.bitrate = 6Mbps

*.**.nic.mac1609_4.useAcks = true
*.**.nic.mac1609_4.ackErrorRate = 0.0
*.**.nic.mac1609_4.frameErrorRate = 0.0

*.**.nic.phy80211p.minPowerLevel = -94dBm
*.**.nic.phy80211p.maxTXPower = 100mW
*.**.nic.phy80211p.useNoiseFloor = true
*.**.nic.phy80211p.noiseFloor = -95dBm
*.**.nic.phy80211p.decider = xmldoc("config.xml")
*.**.nic.phy80211p.usePropagationDelay = true

##########################################################
#                      Mobility                          #
##########################################################
*.node[*].mobility.x = 0
*.node[*].mobility.y = 0
*.node[*].mobility.z = 1.895
*.node[*].veinsmobility.x = 0
*.node[*].veinsmobility.y = 0
*.node[*].veinsmobility.z = 1.895
*.shockwave[*].mobility.x = 0
*.shockwave[*].mobility.y = 0
*.shockwave[*].mobility.z = 1.895

# RMS configuration

# using sumo coordinates
*.rms.mobility_type = "SUMOBaseMobility"
*.rms.mobility.x = 100
*.rms.mobility.y = -95
*.rms.mobility.z = 10
*.**.nicRms.phyRms.usePropagationDelay = true
*.**.nicRms.phyRms.useNoiseFloor = true
# 1.3803e-23 (boltzmann) * 290 kelvin * BW (400 MHz) * 1000 (W to mW) * 6 (noise figure)
*.**.nicRms.phyRms.noiseFloor = -80dBm
*.**.nicRms.phyRms.analogueModels = xmldoc("config-rms.xml")
*.**.nicRms.phyRms.decider = xmldoc("config-rms.xml")
*.**.nicRms.phyRms.minPowerLevel = -80dBm
*.**.nicRms.phyRms.txPower = 1000mW
*.**.nicRms.phyRms.bitrate = 120Mbps
*.**.nicRms.phyRms.centerFrequency = 25GHz
# RMS facing towards the lower part of the intersection
*.rms.nicRms.phyRms.rms_v2_x = -1
*.rms.nicRms.phyRms.rms_v2_y = 0
*.rms.nicRms.phyRms.rms_v2_z = 0

*.rms.nicRms.phyRms.rms_v1_x = 0
*.rms.nicRms.phyRms.rms_v1_y = 0
*.rms.nicRms.phyRms.rms_v1_z = 1

*.obstaclesRms.obstacles = xmldoc("config-rms.xml", "//AnalogueModel[@type='SimpleObstacleShadowing']/obstacles")
*.obstaclesRms.debug = true

##########################################################
#                    Seeds and PRNGs                     #
##########################################################
seed-set = ${repetition}
**.seed = ${repetition}

*.node[*].prot.rng-0 = 2
*.node[*].appl.rng-0 = 3
*.node[*].scenario.rng-0 = 4
*.shockwave[*].scenario.rng-0 = 4
**.traffic.rng-0 = 5

#launch config. tells Veins which SUMO configuration to run
*.manager.configFile = "./sumocfg/intersection.sumo.cfg"
*.manager.launchConfig = xmldoc("./sumocfg/intersection.launchd.xml")

##########################################################
#                    Position helper                     #
##########################################################

*.node[*].helper_type = "PositionHelper"
*.shockwave[*].helper_type = "PositionHelper"

##########################################################
#               Scenario common parameters               #
##########################################################

#controller and engine related parameters
*.node[*].scenario.caccC1 = 0.5
*.node[*].scenario.caccXi = 1
*.node[*].scenario.caccOmegaN = 0.2 Hz
*.node[*].scenario.caccSpacing = 5 m
*.node[*].scenario.engineTau = 0.5 s
*.node[*].scenario.ploegH = 0.5 s
*.node[*].scenario.ploegKp = 0.2
*.node[*].scenario.ploegKd = 0.7
*.node[*].scenario.useRealisticEngine = false
#via wireless send acceleration computed by the controller, not the actual one
*.node[*].scenario.useControllerAcceleration = true
*.node[*].scenario.nLanes = 1
*.node[*].scenario.targetController = "CACC"

#headway for ACCs (when used as followers)
*.node[*].scenario.accHeadway = 0.1 s
*.node[*].scenario.leaderHeadway = ${leaderHeadway = 1.2} s

#average leader speed
*.node[*].scenario.leaderSpeed = ${leaderSpeed = 50} kmph

##########################################################
#                      Application                       #
##########################################################

*.node[*].appl_type = "GeneralPlatooningApp"
#enable statistics recording for the application
*.node[*].appl.*.scalar-recording = true
*.node[*].appl.*.vector-recording = true
#use the join at back implementation of the join maneuver
*.node[*].appl.joinManeuver = "JoinAtBack"
*.node[*].appl.mergeManeuver = "MergeAtBack"
*.node[*].appl.intersectionMergeManeuver = "IntersectionMergeManeuver"

##########################################################
#                Communication protocols                 #
##########################################################

*.node[*].protocol_type = "IntersectionMergingBeaconingLogging"
#enable statistics recording for the network layer
*.node[*].prot.*.scalar-recording = true
*.node[*].prot.*.vector-recording = true
#set the beaconing interval to be 0.1s
*.node[*].prot.beaconingInterval = 0.1 s
#access category for platooning beacons
*.node[*].prot.priority = 4
#packet size for platooning beacon
*.node[*].prot.packetSize = 200

##########################################################
#                    Traffic manager                     #
##########################################################

**.traffic_type = "IntersectionTrafficManager"
#insert platooning vehicles at time
**.traffic.platoonInsertTime = 1 s
#insert platooning vehicles with a speed of
**.traffic.platoonInsertSpeed = ${leaderSpeed}kmph
#SUMO vtype for platooning vehicles
**.traffic.platooningVType = "vtypeauto"
**.traffic.shockwaveVType = "shockwave"
**.traffic.injectShockwaveCars = true
#controllers to be tested
**.numericController = ${controller = 0}
*.traffic.controller = ${sController = "CACC" ! controller}
#insert vehicles already at steady-state. distance depends on controller
**.traffic.platoonInsertDistance = ${5 ! controller}m
**.traffic.platoonInsertHeadway = ${0 ! controller}s
**.traffic.platoonLeaderHeadway = ${leaderHeadway}s

**.traffic.platoonSizeA = 2
**.traffic.platoonSizeB = 2
**.traffic.platoonSizeC = 2
**.traffic.initialPositionDeltaA = 0
**.traffic.initialPositionDeltaB = 0
**.traffic.initialPositionDeltaC = 120
**.traffic.routeLeftRight = "left_right"
**.traffic.routeBottomRight = "bottom_right"

#disable statistics recording for all other modules
**.scalar-recording = false
**.vector-recording = false

[Config Shockwave]

#average leader speed
*.node[*].scenario.leaderSpeed = ${ls=50}kmph
#low speed start, jam situation
*.shockwave[*].scenario.jamSpeed = 30 kmph
#speed up, free situation
*.shockwave[*].scenario.freeSpeed = 50 kmph
#deceleration when coming to traffic jam
*.shockwave[*].scenario.jamDeceleration = 2 mpsps
#duration of jam/free periods
*.shockwave[*].scenario.jamDuration = uniform(10s, 20s)

[Config WithShadowing]
# 11p shadowing
*.useBuildingShadowing = true
*.**.nic.phy80211p.analogueModels = xmldoc("config_shadowing.xml")
*.obstacles.obstacles = xmldoc("config_shadowing.xml", "//AnalogueModel[@type='SimpleObstacleShadowing']/obstacles")

[Config WithoutShadowing]
# perfect conditions
*.useBuildingShadowing = false
*.**.nic.phy80211p.analogueModels = xmldoc("config.xml")

[Config IntersectionMerge]
extends = Shockwave
*.manager.command = "sumo-gui"

*.**.nicRms.phyRms.ignoreNonReflectedSignals = true
**.dummy = ${scenario = 0, 1, 2}
**.dummyshadowing = ${shadowing = 0, 1, 1 ! scenario}
*.useBuildingShadowing = ${false, true, true! scenario}
# no need to configure shadowing for RMS, it is always active
*.**.nic.phy80211p.analogueModels = ${xmldoc("config.xml"), xmldoc("config_shadowing.xml"), xmldoc("config_shadowing.xml") ! shadowing}
*.obstacles.obstacles = ${xml("<obstacles/>"), xmldoc("config_shadowing.xml", "//AnalogueModel[@type='SimpleObstacleShadowing']/obstacles"), xmldoc("config_shadowing.xml", "//AnalogueModel[@type='SimpleObstacleShadowing']/obstacles") ! shadowing}

**.dummyrms = ${rms = 0, 0, 1 ! scenario}
*.node[*].prot.useRms = ${false, false, true ! scenario}

*.node[*].scenario_type = "IntersectionMergeScenario"

output-vector-file = ${resultdir}/${configname}_${repetition}_${shadowing}_${rms}.vec
output-scalar-file = ${resultdir}/${configname}_${repetition}_${shadowing}_${rms}.sca

[Config RMSTesting]
extends = IntersectionMerge
**.traffic.platoonSizeA = 1
**.traffic.platoonSizeB = 0
**.traffic.platoonSizeC = 1
**.traffic.initialPositionDeltaA = 0
**.traffic.initialPositionDeltaB = 0
**.traffic.initialPositionDeltaC = 100
**.traffic.injectShockwaveCars = false
*.**.nicRms.phyRms.noiseFloor = -10000dBm
*.**.nicRms.phyRms.minPowerLevel = -10000dBm
*.**.nicRms.phyRms.ignoreNonReflectedSignals = true
*.**.nicRms.phyRms.ignoreNoiseAndInterference = true
*.node[*].protocol_type = "IntersectionMergingBeaconingLogging"
*.node[0].prot.disableBeaconing = true

*.node[*].prot.useRms = true

output-vector-file = ${resultdir}/${configname}_${repetition}.vec
output-scalar-file = ${resultdir}/${configname}_${repetition}.sca

[Config IntersectionMergeNoGui]
extends = IntersectionMerge

*.manager.command = "sumo"
*.manager.ignoreGuiCommands = true
#force the config name in the output file to be the same as for the gui experiment
output-vector-file = ${resultdir}/IntersectionMerge_${repetition}.vec
output-scalar-file = ${resultdir}/IntersectionMerge_${repetition}.sca

